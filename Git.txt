|----------------------GIT---------------------------|
|----------------------------------------------------|

GIT is a Distributed Source Control Repository. Better know as VERSION CONTROL SYSTEM.
Main functions: 
- Merge files into one, when more than two or more people are working in the same file.
- Time Capsule: Over time as you make change of the file, it keeps the history of the changes. 

1- If you run into problems, you can run $ git help /this will give you a list of commands.

2- Setting Up Git: 
$ git config --global user.name "Tavo"  /who is the author
$ git config --global user.email "tavoasenjo@gmail.com" /email of the author
$ git config --global color.ui true  / It gives us pretty command line colors

3- To create a repository we go to the directory (we want to upload) and we use $ git init
This will initialize an empty LOCAL Git Repository (in the hidden .git file)

4- Go to www.github.com, log in and create a new repository. DO NOT INCLUDE A README FILE.
Copy the file https link

5- On the terminal (your git repository directory) type $ git remote add origin [https link]

6- To Check TIMELINE OF COMMITED FILES we just type $ git log


|--------------------WORKING WITH FILES----------------|
|------------------------------------------------------|


1- Add file to the staging area (area where the file is not committed yet). 
	$ git add [name file]  /single file
	$ git add -all /every file
	$ git add "*.txt" /all .txt files
	$ git add css/ /all the files inside css directory

2- Commit changes. It is basically grab the files located in the stage area and commit them.
	$git commit -m "commit message"

3- Git Status command will help us to check what's changed since the last commit. It will tell us if we add a new file and if we have not committed yet.
	$ git status

|-------------------STAGING AND REMOTES-----------------|
|-------------------------------------------------------|

1- Let's say I made a change to a file, but I do not remember what that change was. 
   $ git diff /it will show me the difference of unstaged files. In red is what was removed; in green what was added
   $ git diff --staged /it will show me the difference of stagged files (git add)

2- How do we get things off the stage. Let's say I added something by mistake. 
 	HEAD refers to the last commit of our current branch or time line we are on.
 	$ git reset HEAD [name file]

3- How do we reset the file to the last time it was changed (the last commit), and delete modifications after that commit
	$ git checkout -- [file name]

4- Add and Commit in one line (not recommended)
	$ git commit -a -m "Modify File"  /this will not add new files, is just for modified ones

5- What if we commit and then we regret it. We can UNDO last commit. There are different ways:
	git reset --soft HEAD^ /this is move to commit before HEAD (last commit). Put changes into staging again
	git commit --amend -m "New Message" /change the last commit message
	git reset --hard HEAD^ /this undo last commit and ALL CHANGES
	git reset --hard HEAD^^ /undo last 2 commits and all changes

6- PUSH the local repository to a Remote repository (ON GITHUB. See section GIT.4)
   a) $ git remote add origin [https link] /link local repository with remote repository
   b) $ git push -u origin master /push the content we have in our local repository to the remote repository. with -u, after that everytime we want to push something it will be just $ git push

7- to see the REMOTE REPOSITORIES
	$ git remote -v

8- TO PULL changes down from the remote
	$ git pull

|----------------CLONING & BRANCHING (LOCAL)------------|
|-------------------------------------------------------|

1- To Clone a repository from Github copy the link of the repository on Github and then:
	$ git clone [link Repository] /this will add a 'origin' remote, pointing it to the clone URL

2- Create a BRANCH
	$ git branch [name branch] / it creates a new branch, but note that we are still in master branch
	$ git branch / checks in which branch we are
	$ git checkout -b [name branch] / creates and checks out branch

3- MOVE to another Branch
	$ git checkout [new branch] / we switch branches. Now we can do whatever we want in the new branch without affecting the master

4- MERGE new branch with Master (for that, make sure you are in master)
	$ git merge [new branch]

5- DELETE branch
	$ git branch -d [name branch]

6- MERGE two branches with changes made in both branches -> this will take you to VIM. to get out of there type :wq
   Git makes a RECURSIVE MERGE: a commit created to merge the two branches. No files were added, though. 	

|------------------COLABORATION BASICS------------------|
|-------------------------------------------------------|

1- A and B are working in their files in their local rep. A add, commit and push the changes. B add, commit and push, but it is rejected. B HAS TO PULL FIRST
	$ git pull /fetch (or Sync) our local repository with the remote one.

2- A and B are working in the SAME FILE. when someone try to Merge is not going to be successful. MERGE CONFLICT
	If we go to the file, we will see the conflict. HEAD is the local version (my file); and then the other person's version.
	We modify the file and then $ git commit -a 
	$ git push

|--------------------REMOTE BRANCHES & TAGS--------------------|
|--------------------------------------------------------------|

1- WHY create a REMOTE BRANCH? -> so other people can work on it (as a sub repository).

2- It is also a good practice to BACK THE BRUNCH UP, so we can do it uploading it to Github.

3- To UPLOAD the branch to GITHUB
	$ git push origin [name of branch]

4- Next time the other person makes PULL, it will tell him that there is a new branch. To see list of ALL REMOTE BRANCHES
	$ git branch -r
	$ git checkout [name branch] / to start working on that branch
	$ git remote show origin / it will show us all the remote branches; local branches and the one they've merged with; and local refs when we do PUSH

5- TO DELELE A REMOTE BRANCH
	$ git push origin :[branch name] /this delete the branch on Github, not locally 
	If there are changes not committed, we cannot use $ git branch -d [branch name] /instead we use:
	$ git branch -D [branch name]

6- Once you DELETED the remote branch, clean up local references
	$ git remote prune origin

7- CREATE A TAG
	$ git tag -a [name tag] -m "comments"

8- Check TAGS
	$git tag

9- PUSH tag to origin
	$ git push --tags

10- Change to Other Tag Created
	$git tag //check the tags
	$git checkout [nameOftag]


|--------------------------GIT FLOW----------------------------|
|--------------------------------------------------------------|
- GitFlow is a branching model. (you have to install git-flow. just one time)
- It makes parallel development very easy, by isolating new development from finished work.
- New development (fixing a bug in the master, for instance) is done in feature branches, and is only merged back into main body of code whan the developer is happy taht the code is ready for realise.

1- In a specific branch type:
	$ git flow feature start feature_name
2- After making the changes or building the feature
	$ git flow feature finish feature_name
    // the branch will merge automatically with its parent branch

- HOTFIX - Let's say you need to make a quick change of the code version on MASTER
	1- $ git flow hotfix start [give_a_name]
	2- After making the changes and fixing the bug
		$ git flow hotfix finish [give_a_name]


|--------------------REBASE BELONG TO US-----------------------|
|--------------------------------------------------------------|
 -> Merge Commit are not so good since we have them for local branches, remote branches, and it may seem that is polluting our history. Merge Commits feel useless!
 -> There is an alternative to doing the same: fetch and rebase

 - When we do git fetch we are pulling all the info, but we are not merging it. 
 - git rebase does 3 things:
 	1- Move all Changes to master which are not in origin.master to a temporary area.
 	2- Run all origin/master commits
 	3- Run all origin/master commits in the temporary area on top of the master, one at a time

 	All in all, there is not merge commit, just one after the next! 

 	Ex:
 	We have a branch called kennel and we want to rebase it to master.
 	- $ git checkout kennel
 	- $ git rebase master  //With the rebase complete, kennel should merge with master cleanly.
 	- $ git checkout master
 	- $ git merge kennel

 	Your co-worker has pushed changes to the master branch on the origin repo. Retrieve it without mergin it so we can replay our work on top of it.
 	- $ git fetch // with this our local repo knows of the latest changes or origin master.

 	Move your master commits after the commits from origin/master
 	- $ git rebase //notice if your co-worker pushed again new commits before you, you have to fetch and rebase again



|-------------------------SHORT HISTORY------------------------|
|--------------------------------------------------------------|

this is just a test